// Notes from attempting to integrate eleventy-img (revisit)

1. outputDir: "/images/" throws err
`Template render error` was thrown
> EACCES: permission denied, mkdir '/images'

issue #1 fix: remove leading backslash to look like : 'images/' 

2. 
`Template render error` was thrown
> Input file is missing

issue #2 fix: add period to relative path when using async shortcode
```
{% myImage "./images/boardwalk.jpg", "alt text" %} // usage


/* 
    Eleventy-img code after reading through main repository
    - Future implementation to utilize eleventy-img for bringing down network payload size from 1500-1600kB even lower.
    - Currently using sharp to resize images for different viewports (.jpg format)
    - With elventy-img we can utilize the multi-format responsive <picutre> element and pass (.webp & .jpg formats for older browsers)
*/

eleventyConfig.addNunjucksAsyncShortcode("myImage", async function(src, alt, outputFormat="jpg") {
        if (alt === undefined) {
            throw new error(`Missing \`alt\` attribute on myImage from ${src}`);
        }

        // returns promise
        let stats = await Image(src, {
    
            // Array of widths
            // Optional: use falsy value to fall back to native image size
            widths: [1024, 640, 280, null],

            // Pass any format supported by sharp
            formats: [outputFormat],

            // the directory in the image URLs <img src="/img/MY_IMAGE.png">
            urlPath: "/images/",

            // the path to the directory on the file system to write the image files to disk
            outputDir: "images/",
        });
        
        let props = stats[outputFormat].pop();
        // console.log(props);
        
        return `<img src="${props.url}" width="${props.width}" height="${props.height}" alt="${props.alt}" />`;
    });

    // works also with addLiquidShortcode or addNunjucksAsyncShortcode
    eleventyConfig.addNunjucksAsyncShortcode("tester", async function(src, alt) {
        if(alt === undefined) {
        // You bet we throw an error on missing alt (alt="" works okay)
        throw new Error(`Missing \`alt\` on myResponsiveImage from: ${src}`);
        }

        let stats = await Image(src, {
            // Array of widths
            // Optional: use falsy value to fall back to native image size
            widths: [280, 640, 1024],

            // Pass any format supported by sharp
            formats: ["webp", "jpeg"],

            // the directory in the image URLs <img src="/img/MY_IMAGE.png">
            urlPath: "/images/",

            // the path to the directory on the file system to write the image files to disk
            outputDir: "images/",
        });
        let lowestSrc = stats.jpeg[0];
        let sizes = "(min-width: 400px) 33.3vw, 100vw"; // Make sure you customize this!

        // Iterate over formats and widths
        return `<picture>
        ${Object.values(stats).map(imageFormat => {
            return `  <source type="image/${imageFormat[0].format}" srcset="${imageFormat.map(entry => `${entry.url} ${entry.width}w`).join(", ")}" sizes="${sizes}">`;
        }).join("\n")}
            <img
                alt="${alt}"
                src="${lowestSrc.url}"
                width="${lowestSrc.width}"
                height="${lowestSrc.height}">
        </picture>`;
    });
